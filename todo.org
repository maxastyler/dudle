* Change the game parts, and refactor into smaller modules
  The game_live and game_server parts should just care about events, and not have much logic inside their event
  handling functions. They should just call out to the smaller modules.
  Eg, have a Play module, which contains the functions for modifying the play state, eg. adding submissions to the rounds, etc...
  The things which should be broadcast are changes in rounds, all submissions, things like that.
  Players should then call the genserver which will give them their respective state.
  Player tracking should be done through presence still.

  The largest part of broadcasting will be done when revealing the submissions.

  Have smaller liveviews (components) for the different parts of the game state.

* Client possible screens
  What are the different screens which we need to show on the client, and what data should the client have
  which is used in these screens?

  - Game lobby
    Data:
    - Current players
  - Playing with a prompt
    Data:
    - The prompt data (either a text or an image prompt)
  - Revealing
    Data:
    - current revealer
    - Revealed prompts
    - voting state
  - Ended
    Data:
    - scores
    - prompts?

* Messages that need to be sent
  There are two different ways for the clients to get data: broadcasting on the room channel, and calling the game server
  The calls to the game server are used to get information necessary for each client (new prompts)
  The broadcasts are used to get information used by all clients (broadcasting the results, etc...)
